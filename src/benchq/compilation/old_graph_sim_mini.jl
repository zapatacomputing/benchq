################################################################################
# © Copyright 2022-2023 Zapata Computing Inc.
################################################################################
"""This module contains functions for getting the graph state corresponding to a
state generated by a circuit using a graph state simulator (graph_sim) from the paper
"Fast simulation of stabilizer circuits using a graph state representation" by Simon
Anders, Hans J. Briegel. https://arxiv.org/abs/quant-ph/0504117"
"""
module OldSimMini

using Jabalizer
using PythonCall

using TimerOutputs

const to = TimerOutput()

################################################################################
# © Copyright 2022-2023 Zapata Computing Inc.
################################################################################
"""This contains the data required to run the graph simulation algorithm.
These tables are used to speed up the graph simulation algorithm by memoizing
the results of certain small calculations which are performed repeatedly.

decomposition_lookup_table is a lookup table for the decomposition of a local
clifford operation into a product of sqrt(X) and sqrt(Z) gates. The index of
the table corresponds to the local clifford operation. The value of the table
is a string of the form "UUVV" where U and V correspond to sqrt(X) and sqrt(Z)
gates respectively.

multiply_lco is a lookup table for the product of two local clifford operations.
The index of the table corresponds to the first local clifford operation and the
value of the table corresponds to the second local clifford operation. The value
of the table is the local clifford operation that is the product of the two
local clifford operations.

cz_table is a lookup table for the product of a CZ gate and a local clifford
operation. The first index of the table corresponds to whether or not a connection
exists between the two nodes CZ acts upon. The second and third indices of the
table correspond to the local clifford operation on the first and second nodes
respectively. The first value of the table is 0 if the the nodes are not connected
after applying the CZ gate and 1 if they are connected after applying the CZ gate.
The second and third values of the table are the local clifford operations on the
first and second nodes respectively after applying the CZ gate.
"""

const decomposition_lookup_table = [
    "UUUU",
    "UU",
    "VVUU",
    "VV",
    "VUU",
    "V",
    "VVV",
    "UUV",
    "UVU",
    "UVUUU",
    "UVVVU",
    "UUUVU",
    "UVV",
    "VVU",
    "UUU",
    "U",
    "VVVU",
    "UUVU",
    "VU",
    "VUUU",
    "UUUV",
    "UVVV",
    "UV",
    "UVUU",
]

const multiply_lco = [
    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
    2 1 4 3 7 8 5 6 12 11 10 9 14 13 16 15 20 19 18 17 23 24 21 22
    3 4 1 2 6 5 8 7 11 12 9 10 16 15 14 13 18 17 20 19 24 23 22 21
    4 3 2 1 8 7 6 5 10 9 12 11 15 16 13 14 19 20 17 18 22 21 24 23
    5 6 7 8 1 2 3 4 21 22 23 24 17 18 19 20 13 14 15 16 9 10 11 12
    6 5 8 7 3 4 1 2 24 23 22 21 18 17 20 19 16 15 14 13 11 12 9 10
    7 8 5 6 2 1 4 3 23 24 21 22 20 19 18 17 14 13 16 15 12 11 10 9
    8 7 6 5 4 3 2 1 22 21 24 23 19 20 17 18 15 16 13 14 10 9 12 11
    9 10 11 12 17 18 19 20 1 2 3 4 21 22 23 24 5 6 7 8 13 14 15 16
    10 9 12 11 19 20 17 18 4 3 2 1 22 21 24 23 8 7 6 5 15 16 13 14
    11 12 9 10 18 17 20 19 3 4 1 2 24 23 22 21 6 5 8 7 16 15 14 13
    12 11 10 9 20 19 18 17 2 1 4 3 23 24 21 22 7 8 5 6 14 13 16 15
    13 14 15 16 21 22 23 24 17 18 19 20 1 2 3 4 9 10 11 12 5 6 7 8
    14 13 16 15 23 24 21 22 20 19 18 17 2 1 4 3 12 11 10 9 7 8 5 6
    15 16 13 14 22 21 24 23 19 20 17 18 4 3 2 1 10 9 12 11 8 7 6 5
    16 15 14 13 24 23 22 21 18 17 20 19 3 4 1 2 11 12 9 10 6 5 8 7
    17 18 19 20 9 10 11 12 13 14 15 16 5 6 7 8 21 22 23 24 1 2 3 4
    18 17 20 19 11 12 9 10 16 15 14 13 6 5 8 7 24 23 22 21 3 4 1 2
    19 20 17 18 10 9 12 11 15 16 13 14 8 7 6 5 22 21 24 23 4 3 2 1
    20 19 18 17 12 11 10 9 14 13 16 15 7 8 5 6 23 24 21 22 2 1 4 3
    21 22 23 24 13 14 15 16 5 6 7 8 9 10 11 12 1 2 3 4 17 18 19 20
    22 21 24 23 15 16 13 14 8 7 6 5 10 9 12 11 4 3 2 1 19 20 17 18
    23 24 21 22 14 13 16 15 7 8 5 6 12 11 10 9 2 1 4 3 20 19 18 17
    24 23 22 21 16 15 14 13 6 5 8 7 11 12 9 10 3 4 1 2 18 17 20 19
]
const cz_table = [
    [
        (1, 1, 1) (1, 1, 1) (1, 1, 4) (1, 1, 4) (1, 1, 6) (1, 1, 6) (1, 1, 7) (1, 1, 7) (0, 4, 9) (0, 4, 9) (0, 1, 11) (0, 1, 11) (1, 1, 4) (1, 1, 4) (1, 1, 1) (1, 1, 1) (1, 1, 7) (1, 1, 7) (1, 1, 6) (1, 1, 6) (0, 1, 11) (0, 1, 11) (0, 4, 9) (0, 4, 9)
        (1, 1, 1) (1, 1, 1) (1, 1, 4) (1, 1, 4) (1, 1, 6) (1, 1, 6) (1, 1, 7) (1, 1, 7) (0, 3, 9) (0, 3, 9) (0, 1, 11) (0, 1, 11) (1, 1, 4) (1, 1, 4) (1, 1, 1) (1, 1, 1) (1, 1, 7) (1, 1, 7) (1, 1, 6) (1, 1, 6) (0, 1, 11) (0, 1, 11) (0, 3, 9) (0, 3, 9)
        (1, 3, 4) (1, 1, 2) (1, 1, 3) (1, 3, 1) (1, 1, 5) (1, 3, 7) (1, 3, 6) (1, 1, 8) (0, 1, 9) (0, 1, 9) (0, 3, 11) (0, 3, 11) (1, 1, 3) (1, 1, 3) (1, 1, 2) (1, 1, 2) (1, 1, 8) (1, 1, 8) (1, 1, 5) (1, 1, 5) (0, 3, 11) (0, 3, 11) (0, 1, 9) (0, 1, 9)
        (1, 4, 1) (1, 1, 2) (1, 1, 3) (1, 4, 4) (1, 1, 5) (1, 4, 6) (1, 4, 7) (1, 1, 8) (0, 1, 9) (0, 1, 9) (0, 4, 11) (0, 4, 11) (1, 1, 3) (1, 1, 3) (1, 1, 2) (1, 1, 2) (1, 1, 8) (1, 1, 8) (1, 1, 5) (1, 1, 5) (0, 4, 11) (0, 4, 11) (0, 1, 9) (0, 1, 9)
        (1, 5, 4) (1, 5, 4) (1, 5, 1) (1, 5, 1) (1, 5, 7) (1, 5, 7) (1, 5, 6) (1, 5, 6) (0, 7, 9) (0, 7, 9) (0, 5, 11) (0, 5, 11) (1, 5, 1) (1, 5, 1) (1, 5, 4) (1, 5, 4) (1, 5, 6) (1, 5, 6) (1, 5, 7) (1, 5, 7) (0, 5, 11) (0, 5, 11) (0, 7, 9) (0, 7, 9)
        (1, 6, 1) (1, 6, 1) (1, 6, 4) (1, 6, 4) (1, 6, 6) (1, 6, 6) (1, 6, 7) (1, 6, 7) (0, 7, 9) (0, 7, 9) (0, 6, 11) (0, 6, 11) (1, 6, 4) (1, 6, 4) (1, 6, 1) (1, 6, 1) (1, 6, 7) (1, 6, 7) (1, 6, 6) (1, 6, 6) (0, 6, 11) (0, 6, 11) (0, 7, 9) (0, 7, 9)
        (1, 7, 1) (1, 6, 2) (1, 6, 3) (1, 7, 4) (1, 6, 5) (1, 7, 6) (1, 7, 7) (1, 6, 8) (0, 6, 9) (0, 6, 9) (0, 7, 11) (0, 7, 11) (1, 6, 3) (1, 6, 3) (1, 6, 2) (1, 6, 2) (1, 6, 8) (1, 6, 8) (1, 6, 5) (1, 6, 5) (0, 7, 11) (0, 7, 11) (0, 6, 9) (0, 6, 9)
        (1, 7, 1) (1, 5, 3) (1, 5, 2) (1, 7, 4) (1, 5, 8) (1, 7, 6) (1, 7, 7) (1, 5, 5) (0, 5, 9) (0, 5, 9) (0, 7, 11) (0, 7, 11) (1, 5, 2) (1, 5, 2) (1, 5, 3) (1, 5, 3) (1, 5, 5) (1, 5, 5) (1, 5, 8) (1, 5, 8) (0, 7, 11) (0, 7, 11) (0, 5, 9) (0, 5, 9)
        (0, 9, 4) (0, 9, 3) (0, 9, 1) (0, 9, 1) (0, 9, 7) (0, 9, 7) (0, 9, 6) (0, 9, 5) (0, 9, 9) (0, 9, 9) (0, 9, 11) (0, 9, 11) (0, 9, 1) (0, 9, 1) (0, 9, 3) (0, 9, 3) (0, 9, 5) (0, 9, 5) (0, 9, 7) (0, 9, 7) (0, 9, 11) (0, 9, 11) (0, 9, 9) (0, 9, 9)
        (0, 9, 4) (0, 9, 3) (0, 9, 1) (0, 9, 1) (0, 9, 7) (0, 9, 7) (0, 9, 6) (0, 9, 5) (0, 9, 9) (0, 9, 9) (0, 9, 11) (0, 9, 11) (0, 9, 1) (0, 9, 1) (0, 9, 3) (0, 9, 3) (0, 9, 5) (0, 9, 5) (0, 9, 7) (0, 9, 7) (0, 9, 11) (0, 9, 11) (0, 9, 9) (0, 9, 9)
        (0, 11, 1) (0, 11, 1) (0, 11, 3) (0, 11, 4) (0, 11, 5) (0, 11, 6) (0, 11, 7) (0, 11, 7) (0, 11, 9) (0, 11, 9) (0, 11, 11) (0, 11, 11) (0, 11, 3) (0, 11, 3) (0, 11, 1) (0, 11, 1) (0, 11, 7) (0, 11, 7) (0, 11, 5) (0, 11, 5) (0, 11, 11) (0, 11, 11) (0, 11, 9) (0, 11, 9)
        (0, 11, 1) (0, 11, 1) (0, 11, 3) (0, 11, 4) (0, 11, 5) (0, 11, 6) (0, 11, 7) (0, 11, 7) (0, 11, 9) (0, 11, 9) (0, 11, 11) (0, 11, 11) (0, 11, 3) (0, 11, 3) (0, 11, 1) (0, 11, 1) (0, 11, 7) (0, 11, 7) (0, 11, 5) (0, 11, 5) (0, 11, 11) (0, 11, 11) (0, 11, 9) (0, 11, 9)
        (1, 3, 4) (1, 1, 2) (1, 1, 3) (1, 3, 1) (1, 1, 5) (1, 3, 7) (1, 3, 6) (1, 1, 8) (0, 1, 9) (0, 1, 9) (0, 3, 11) (0, 3, 11) (1, 1, 3) (1, 1, 3) (1, 1, 2) (1, 1, 2) (1, 1, 8) (1, 1, 8) (1, 1, 5) (1, 1, 5) (0, 3, 11) (0, 3, 11) (0, 1, 9) (0, 1, 9)
        (1, 3, 4) (1, 1, 2) (1, 1, 3) (1, 3, 1) (1, 1, 5) (1, 3, 7) (1, 3, 6) (1, 1, 8) (0, 1, 9) (0, 1, 9) (0, 3, 11) (0, 3, 11) (1, 1, 3) (1, 1, 3) (1, 1, 2) (1, 1, 2) (1, 1, 8) (1, 1, 8) (1, 1, 5) (1, 1, 5) (0, 3, 11) (0, 3, 11) (0, 1, 9) (0, 1, 9)
        (1, 1, 1) (1, 1, 1) (1, 1, 4) (1, 1, 4) (1, 1, 6) (1, 1, 6) (1, 1, 7) (1, 1, 7) (0, 3, 9) (0, 3, 9) (0, 1, 11) (0, 1, 11) (1, 1, 4) (1, 1, 4) (1, 1, 1) (1, 1, 1) (1, 1, 7) (1, 1, 7) (1, 1, 6) (1, 1, 6) (0, 1, 11) (0, 1, 11) (0, 3, 9) (0, 3, 9)
        (1, 1, 1) (1, 1, 1) (1, 1, 4) (1, 1, 4) (1, 1, 6) (1, 1, 6) (1, 1, 7) (1, 1, 7) (0, 3, 9) (0, 3, 9) (0, 1, 11) (0, 1, 11) (1, 1, 4) (1, 1, 4) (1, 1, 1) (1, 1, 1) (1, 1, 7) (1, 1, 7) (1, 1, 6) (1, 1, 6) (0, 1, 11) (0, 1, 11) (0, 3, 9) (0, 3, 9)
        (1, 7, 1) (1, 5, 3) (1, 5, 2) (1, 7, 4) (1, 5, 8) (1, 7, 6) (1, 7, 7) (1, 5, 5) (0, 5, 9) (0, 5, 9) (0, 7, 11) (0, 7, 11) (1, 5, 2) (1, 5, 2) (1, 5, 3) (1, 5, 3) (1, 5, 5) (1, 5, 5) (1, 5, 8) (1, 5, 8) (0, 7, 11) (0, 7, 11) (0, 5, 9) (0, 5, 9)
        (1, 7, 1) (1, 5, 3) (1, 5, 2) (1, 7, 4) (1, 5, 8) (1, 7, 6) (1, 7, 7) (1, 5, 5) (0, 5, 9) (0, 5, 9) (0, 7, 11) (0, 7, 11) (1, 5, 2) (1, 5, 2) (1, 5, 3) (1, 5, 3) (1, 5, 5) (1, 5, 5) (1, 5, 8) (1, 5, 8) (0, 7, 11) (0, 7, 11) (0, 5, 9) (0, 5, 9)
        (1, 5, 4) (1, 5, 4) (1, 5, 1) (1, 5, 1) (1, 5, 7) (1, 5, 7) (1, 5, 6) (1, 5, 6) (0, 7, 9) (0, 7, 9) (0, 5, 11) (0, 5, 11) (1, 5, 1) (1, 5, 1) (1, 5, 4) (1, 5, 4) (1, 5, 6) (1, 5, 6) (1, 5, 7) (1, 5, 7) (0, 5, 11) (0, 5, 11) (0, 7, 9) (0, 7, 9)
        (1, 5, 4) (1, 5, 4) (1, 5, 1) (1, 5, 1) (1, 5, 7) (1, 5, 7) (1, 5, 6) (1, 5, 6) (0, 7, 9) (0, 7, 9) (0, 5, 11) (0, 5, 11) (1, 5, 1) (1, 5, 1) (1, 5, 4) (1, 5, 4) (1, 5, 6) (1, 5, 6) (1, 5, 7) (1, 5, 7) (0, 5, 11) (0, 5, 11) (0, 7, 9) (0, 7, 9)
        (0, 11, 1) (0, 11, 1) (0, 11, 3) (0, 11, 4) (0, 11, 5) (0, 11, 6) (0, 11, 7) (0, 11, 7) (0, 11, 9) (0, 11, 9) (0, 11, 11) (0, 11, 11) (0, 11, 3) (0, 11, 3) (0, 11, 1) (0, 11, 1) (0, 11, 7) (0, 11, 7) (0, 11, 5) (0, 11, 5) (0, 11, 11) (0, 11, 11) (0, 11, 9) (0, 11, 9)
        (0, 11, 1) (0, 11, 1) (0, 11, 3) (0, 11, 4) (0, 11, 5) (0, 11, 6) (0, 11, 7) (0, 11, 7) (0, 11, 9) (0, 11, 9) (0, 11, 11) (0, 11, 11) (0, 11, 3) (0, 11, 3) (0, 11, 1) (0, 11, 1) (0, 11, 7) (0, 11, 7) (0, 11, 5) (0, 11, 5) (0, 11, 11) (0, 11, 11) (0, 11, 9) (0, 11, 9)
        (0, 9, 4) (0, 9, 3) (0, 9, 1) (0, 9, 1) (0, 9, 7) (0, 9, 7) (0, 9, 6) (0, 9, 5) (0, 9, 9) (0, 9, 9) (0, 9, 11) (0, 9, 11) (0, 9, 1) (0, 9, 1) (0, 9, 3) (0, 9, 3) (0, 9, 5) (0, 9, 5) (0, 9, 7) (0, 9, 7) (0, 9, 11) (0, 9, 11) (0, 9, 9) (0, 9, 9)
        (0, 9, 4) (0, 9, 3) (0, 9, 1) (0, 9, 1) (0, 9, 7) (0, 9, 7) (0, 9, 6) (0, 9, 5) (0, 9, 9) (0, 9, 9) (0, 9, 11) (0, 9, 11) (0, 9, 1) (0, 9, 1) (0, 9, 3) (0, 9, 3) (0, 9, 5) (0, 9, 5) (0, 9, 7) (0, 9, 7) (0, 9, 11) (0, 9, 11) (0, 9, 9) (0, 9, 9)
    ],
    [
        (0, 1, 1) (0, 4, 1) (0, 4, 3) (0, 1, 4) (0, 4, 5) (0, 1, 6) (0, 1, 7) (0, 4, 7) (1, 6, 24) (1, 6, 23) (1, 6, 22) (1, 6, 21) (0, 6, 3) (0, 7, 3) (0, 6, 1) (0, 7, 1) (0, 7, 7) (0, 6, 7) (0, 7, 5) (0, 6, 5) (1, 6, 11) (1, 6, 12) (1, 6, 9) (1, 6, 10)
        (0, 1, 4) (0, 3, 3) (0, 3, 1) (0, 1, 1) (0, 3, 7) (0, 1, 7) (0, 1, 6) (0, 3, 5) (1, 5, 24) (1, 5, 23) (1, 5, 22) (1, 5, 21) (0, 7, 1) (0, 5, 1) (0, 7, 3) (0, 5, 3) (0, 5, 5) (0, 7, 5) (0, 5, 7) (0, 7, 7) (1, 5, 11) (1, 5, 12) (1, 5, 9) (1, 5, 10)
        (0, 3, 4) (0, 1, 3) (0, 1, 1) (0, 3, 1) (0, 1, 7) (0, 3, 7) (0, 3, 6) (0, 1, 5) (1, 5, 23) (1, 5, 24) (1, 5, 21) (1, 5, 22) (0, 5, 1) (0, 7, 1) (0, 5, 3) (0, 7, 3) (0, 7, 5) (0, 5, 5) (0, 7, 7) (0, 5, 7) (1, 5, 12) (1, 5, 11) (1, 5, 10) (1, 5, 9)
        (0, 4, 1) (0, 1, 1) (0, 1, 3) (0, 4, 4) (0, 1, 5) (0, 4, 6) (0, 4, 7) (0, 1, 7) (1, 6, 23) (1, 6, 24) (1, 6, 21) (1, 6, 22) (0, 7, 3) (0, 6, 3) (0, 7, 1) (0, 6, 1) (0, 6, 7) (0, 7, 7) (0, 6, 5) (0, 7, 5) (1, 6, 12) (1, 6, 11) (1, 6, 10) (1, 6, 9)
        (0, 5, 4) (0, 7, 3) (0, 7, 1) (0, 5, 1) (0, 7, 7) (0, 5, 7) (0, 5, 6) (0, 7, 5) (1, 1, 22) (1, 1, 21) (1, 1, 24) (1, 1, 23) (0, 1, 1) (0, 3, 1) (0, 1, 3) (0, 3, 3) (0, 3, 5) (0, 1, 5) (0, 3, 7) (0, 1, 7) (1, 1, 9) (1, 1, 10) (1, 1, 11) (1, 1, 12)
        (0, 6, 1) (0, 7, 1) (0, 7, 3) (0, 6, 4) (0, 7, 5) (0, 6, 6) (0, 6, 7) (0, 7, 7) (1, 1, 23) (1, 1, 24) (1, 1, 21) (1, 1, 22) (0, 4, 3) (0, 1, 3) (0, 4, 1) (0, 1, 1) (0, 1, 7) (0, 4, 7) (0, 1, 5) (0, 4, 5) (1, 1, 12) (1, 1, 11) (1, 1, 10) (1, 1, 9)
        (0, 7, 1) (0, 6, 1) (0, 6, 3) (0, 7, 4) (0, 6, 5) (0, 7, 6) (0, 7, 7) (0, 6, 7) (1, 1, 24) (1, 1, 23) (1, 1, 22) (1, 1, 21) (0, 1, 3) (0, 4, 3) (0, 1, 1) (0, 4, 1) (0, 4, 7) (0, 1, 7) (0, 4, 5) (0, 1, 5) (1, 1, 11) (1, 1, 12) (1, 1, 9) (1, 1, 10)
        (0, 7, 4) (0, 5, 3) (0, 5, 1) (0, 7, 1) (0, 5, 7) (0, 7, 7) (0, 7, 6) (0, 5, 5) (1, 1, 21) (1, 1, 22) (1, 1, 23) (1, 1, 24) (0, 3, 1) (0, 1, 1) (0, 3, 3) (0, 1, 3) (0, 1, 5) (0, 3, 5) (0, 1, 7) (0, 3, 7) (1, 1, 10) (1, 1, 9) (1, 1, 12) (1, 1, 11)
        (1, 23, 7) (1, 21, 6) (1, 21, 7) (1, 23, 6) (1, 21, 4) (1, 23, 1) (1, 23, 4) (1, 21, 1) (0, 1, 1) (0, 1, 3) (0, 3, 3) (0, 3, 1) (0, 7, 7) (0, 5, 5) (0, 7, 5) (0, 5, 7) (0, 5, 3) (0, 7, 1) (0, 5, 1) (0, 7, 3) (0, 3, 5) (0, 3, 7) (0, 1, 7) (0, 1, 5)
        (1, 23, 6) (1, 21, 7) (1, 21, 6) (1, 23, 7) (1, 21, 1) (1, 23, 4) (1, 23, 1) (1, 21, 4) (0, 3, 1) (0, 3, 3) (0, 1, 3) (0, 1, 1) (0, 5, 7) (0, 7, 5) (0, 5, 5) (0, 7, 7) (0, 7, 3) (0, 5, 1) (0, 7, 1) (0, 5, 3) (0, 1, 5) (0, 1, 7) (0, 3, 7) (0, 3, 5)
        (1, 21, 7) (1, 21, 8) (1, 21, 5) (1, 21, 6) (1, 21, 2) (1, 21, 1) (1, 21, 4) (1, 21, 3) (0, 3, 3) (0, 3, 1) (0, 1, 1) (0, 1, 3) (0, 7, 5) (0, 5, 7) (0, 7, 7) (0, 5, 5) (0, 5, 1) (0, 7, 3) (0, 5, 3) (0, 7, 1) (0, 1, 7) (0, 1, 5) (0, 3, 5) (0, 3, 7)
        (1, 21, 6) (1, 21, 5) (1, 21, 8) (1, 21, 7) (1, 21, 3) (1, 21, 4) (1, 21, 1) (1, 21, 2) (0, 1, 3) (0, 1, 1) (0, 3, 1) (0, 3, 3) (0, 5, 5) (0, 7, 7) (0, 5, 7) (0, 7, 5) (0, 7, 1) (0, 5, 3) (0, 7, 3) (0, 5, 1) (0, 3, 7) (0, 3, 5) (0, 1, 5) (0, 1, 7)
        (0, 3, 6) (0, 1, 7) (0, 1, 5) (0, 3, 7) (0, 1, 1) (0, 3, 4) (0, 3, 1) (0, 1, 3) (0, 7, 7) (0, 7, 5) (0, 5, 7) (0, 5, 5) (1, 17, 19) (1, 17, 20) (1, 17, 17) (1, 17, 18) (1, 17, 13) (1, 17, 14) (1, 17, 15) (1, 17, 16) (0, 5, 3) (0, 5, 1) (0, 7, 3) (0, 7, 1)
        (0, 3, 7) (0, 1, 5) (0, 1, 7) (0, 3, 6) (0, 1, 3) (0, 3, 1) (0, 3, 4) (0, 1, 1) (0, 5, 5) (0, 5, 7) (0, 7, 5) (0, 7, 7) (1, 17, 18) (1, 17, 17) (1, 17, 20) (1, 17, 19) (1, 17, 16) (1, 17, 15) (1, 17, 14) (1, 17, 13) (0, 7, 1) (0, 7, 3) (0, 5, 1) (0, 5, 3)
        (0, 1, 6) (0, 3, 7) (0, 3, 5) (0, 1, 7) (0, 3, 1) (0, 1, 4) (0, 1, 1) (0, 3, 3) (0, 5, 7) (0, 5, 5) (0, 7, 7) (0, 7, 5) (1, 17, 17) (1, 17, 18) (1, 17, 19) (1, 17, 20) (1, 17, 15) (1, 17, 16) (1, 17, 13) (1, 17, 14) (0, 7, 3) (0, 7, 1) (0, 5, 3) (0, 5, 1)
        (0, 1, 7) (0, 3, 5) (0, 3, 7) (0, 1, 6) (0, 3, 3) (0, 1, 1) (0, 1, 4) (0, 3, 1) (0, 7, 5) (0, 7, 7) (0, 5, 5) (0, 5, 7) (1, 17, 20) (1, 17, 19) (1, 17, 18) (1, 17, 17) (1, 17, 14) (1, 17, 13) (1, 17, 16) (1, 17, 15) (0, 5, 1) (0, 5, 3) (0, 7, 1) (0, 7, 3)
        (0, 7, 7) (0, 5, 5) (0, 5, 7) (0, 7, 6) (0, 5, 3) (0, 7, 1) (0, 7, 4) (0, 5, 1) (0, 3, 5) (0, 3, 7) (0, 1, 5) (0, 1, 7) (1, 13, 17) (1, 13, 18) (1, 13, 19) (1, 13, 20) (1, 13, 15) (1, 13, 16) (1, 13, 13) (1, 13, 14) (0, 1, 1) (0, 1, 3) (0, 3, 1) (0, 3, 3)
        (0, 7, 6) (0, 5, 7) (0, 5, 5) (0, 7, 7) (0, 5, 1) (0, 7, 4) (0, 7, 1) (0, 5, 3) (0, 1, 7) (0, 1, 5) (0, 3, 7) (0, 3, 5) (1, 13, 20) (1, 13, 19) (1, 13, 18) (1, 13, 17) (1, 13, 14) (1, 13, 13) (1, 13, 16) (1, 13, 15) (0, 3, 3) (0, 3, 1) (0, 1, 3) (0, 1, 1)
        (0, 5, 7) (0, 7, 5) (0, 7, 7) (0, 5, 6) (0, 7, 3) (0, 5, 1) (0, 5, 4) (0, 7, 1) (0, 1, 5) (0, 1, 7) (0, 3, 5) (0, 3, 7) (1, 13, 19) (1, 13, 20) (1, 13, 17) (1, 13, 18) (1, 13, 13) (1, 13, 14) (1, 13, 15) (1, 13, 16) (0, 3, 1) (0, 3, 3) (0, 1, 1) (0, 1, 3)
        (0, 5, 6) (0, 7, 7) (0, 7, 5) (0, 5, 7) (0, 7, 1) (0, 5, 4) (0, 5, 1) (0, 7, 3) (0, 3, 7) (0, 3, 5) (0, 1, 7) (0, 1, 5) (1, 13, 18) (1, 13, 17) (1, 13, 20) (1, 13, 19) (1, 13, 16) (1, 13, 15) (1, 13, 14) (1, 13, 13) (0, 1, 3) (0, 1, 1) (0, 3, 3) (0, 3, 1)
        (1, 11, 6) (1, 9, 7) (1, 9, 6) (1, 11, 7) (1, 9, 1) (1, 11, 4) (1, 11, 1) (1, 9, 4) (0, 5, 3) (0, 5, 1) (0, 7, 1) (0, 7, 3) (0, 3, 5) (0, 1, 7) (0, 3, 7) (0, 1, 5) (0, 1, 1) (0, 3, 3) (0, 1, 3) (0, 3, 1) (0, 7, 7) (0, 7, 5) (0, 5, 5) (0, 5, 7)
        (1, 11, 7) (1, 9, 6) (1, 9, 7) (1, 11, 6) (1, 9, 4) (1, 11, 1) (1, 11, 4) (1, 9, 1) (0, 7, 3) (0, 7, 1) (0, 5, 1) (0, 5, 3) (0, 1, 5) (0, 3, 7) (0, 1, 7) (0, 3, 5) (0, 3, 1) (0, 1, 3) (0, 3, 3) (0, 1, 1) (0, 5, 7) (0, 5, 5) (0, 7, 5) (0, 7, 7)
        (1, 9, 6) (1, 9, 5) (1, 9, 8) (1, 9, 7) (1, 9, 3) (1, 9, 4) (1, 9, 1) (1, 9, 2) (0, 7, 1) (0, 7, 3) (0, 5, 3) (0, 5, 1) (0, 3, 7) (0, 1, 5) (0, 3, 5) (0, 1, 7) (0, 1, 3) (0, 3, 1) (0, 1, 1) (0, 3, 3) (0, 5, 5) (0, 5, 7) (0, 7, 7) (0, 7, 5)
        (1, 9, 7) (1, 9, 8) (1, 9, 5) (1, 9, 6) (1, 9, 2) (1, 9, 1) (1, 9, 4) (1, 9, 3) (0, 5, 1) (0, 5, 3) (0, 7, 3) (0, 7, 1) (0, 1, 7) (0, 3, 5) (0, 1, 5) (0, 3, 7) (0, 3, 3) (0, 1, 1) (0, 3, 1) (0, 1, 3) (0, 7, 5) (0, 7, 7) (0, 5, 7) (0, 5, 5)
    ],
]

# numbers which correspond to each of the gates in multiply_lco
H_code = 11
S_code = 7
S_Dagger_code = 6
sqrt_X_code = 15

"""Get the vertices of a graph state corresponding to enacting the given circuit
on the |0> state. Also gives the local clifford operation on each node.

Args:
    circuit (Circuit): circuit to get the graph state for

Raises:
    ValueError: if an unsupported gate is encountered

Returns:
    List[int]: the list of local clifford operations on each node
    List[Set[int]]: the adjacency list describing the graph corresponding to the
        graph state
"""
function get_graph_state_data(icm_circuit, n_qubits)
    lco = [H_code for _ in 1:n_qubits]  # local clifford operation on each node
    adj = [Set{Int}() for _ in 1:n_qubits]  # adjacency list

    #=
    # for keeping track of progress
    total_length = length(icm_circuit)
    last_10_percent_completed = 0
    i = 0
    =#

    for (op_name, op_qubits) in icm_circuit
        #=
        i += 1
        percent_completed = round(100 * i / total_length)
        if percent_completed >= last_10_percent_completed + 10
            println("GraphSim Mini is $percent_completed% completed")
            last_10_percent_completed += 10
        end
        =#

        qubit_1 = parse(Int, op_qubits[1]) + 1
        if op_name in ["I", "X", "Y", "Z"]
            # these gates do not change the graph
            continue
        elseif op_name == "H"
            lco[qubit_1] = multiply_lco[H_code, lco[qubit_1]]
        elseif op_name == "S"
            lco[qubit_1] = multiply_lco[S_code, lco[qubit_1]]
        elseif op_name == "S_Dagger"
            lco[qubit_1] = multiply_lco[S_Dagger_code, lco[qubit_1]]
        elseif op_name == "CZ"
            @timeit to "cz" cz(lco, adj, qubit_1, parse(Int, op_qubits[2]) + 1)
        elseif op_name == "CNOT"
            # CNOT = (I \otimes H) CZ (I \otimes H)
            qubit_2 = parse(Int, op_qubits[2]) + 1
            lco[qubit_2] = multiply_lco[H_code, lco[qubit_2]]
            @timeit to "cz" cz(lco, adj, qubit_1, qubit_2)
            lco[qubit_2] = multiply_lco[H_code, lco[qubit_2]]
        else
            error("Unknown gate: $op_name")
        end
    end

    return lco, adj
end


"""Apply a CZ gate to the graph on the given vertices.

Args:
    lco (List[int]): local clifford operation on each node
    adj (List[Set[int]]): adjacency list describing the graph state
    vertex_1 (int): vertex to enact the CZ gate on
    vertex_2 (int): vertex to enact the CZ gate on
"""
function cz(lco, adj, vertex_1, vertex_2)
    check_almost_isolated(adj[vertex_1], vertex_2) && remove_lco(lco, adj, vertex_1, vertex_2)
    check_almost_isolated(adj[vertex_2], vertex_1) && remove_lco(lco, adj, vertex_2, vertex_1)
    check_almost_isolated(adj[vertex_1], vertex_2) && remove_lco(lco, adj, vertex_1, vertex_2)

    connected = vertex_1 in adj[vertex_2] || vertex_2 in adj[vertex_1]
    table_tuple = cz_table[connected+1][lco[vertex_1], lco[vertex_2]]

    connected != table_tuple[1] && toggle_edge(adj, vertex_1, vertex_2)
    lco[vertex_1] = table_tuple[2]
    lco[vertex_2] = table_tuple[3]
end


"""Check if a vertex is almost isolated. A vertex is almost isolated if it has no
neighbors or if it has one neighbor and that neighbor is the given vertex.

Args:
    set (Set[int]): set of neighbors of a vertex
    vertex (int): vertex to check if it is almost isolated

Returns:
    bool: whether the vertex is almost isolated
"""
function check_almost_isolated(set, vertex)
    l = length(set)
    return l != 0 || (l == 1 && vertex in set)
end


"""Remove all local clifford operations on a vertex v. Needs use of a neighbor
of v, but if we wish to avoid using a particular neighbor, we can specify it.

Args:
    lco (List[int]): local clifford operations on each node
    adj (List[Set[int]]): adjacency list describing the graph state
    v (int): index of the vertex to remove local clifford operations from
    avoid (int): index of a neighbor of v to avoid using
"""
function remove_lco(lco, adj, v, avoid)
    @timeit to "remove_lco" begin
    other_neighbors = deepcopy(adj[v])
    delete!(other_neighbors, avoid)
    vb = isempty(other_neighbors) ? avoid : pop!(other_neighbors)

    for factor in reverse(decomposition_lookup_table[lco[v]])
        local_complement(lco, adj, factor == 'U' ? v : vb)
    end
    end
end


"""Take the local complement of a vertex v.

Args:
    lco (List[int]): local clifford operations on each node
    adj (List[Set[int]]): adjacency list describing the graph state
    v (int): index node to take the local complement of
"""
function local_complement(lco, adj, v)
    @timeit to "lc toggle" begin
    neighbors = collect(adj[v])
    for i in 1:length(neighbors)
        for j in i+1:length(neighbors)
            toggle_edge(adj, neighbors[i], neighbors[j])
        end
    end
    end

    @timeit to "lc multiply lco" begin
    lco[v] = multiply_lco[lco[v], sqrt_X_code]
    for i in adj[v]
        lco[i] = multiply_lco[lco[i], S_code]
    end
    end
end


"""If vertices vertex_1 and vertex_2 are connected, we remove the edge.
Otherwise, add it.

Args:
    adj (List[Set[int]]): adjacency list describing the graph state
    vertex_1 (int): index of vertex to be connected or disconnected
    vertex_2 (int): index of vertex to be connected or disconnected
"""
function toggle_edge(adj, vertex_1, vertex_2)
    if vertex_2 in adj[vertex_1] || vertex_1 in adj[vertex_2]
        delete!(adj[vertex_1], vertex_2)
        delete!(adj[vertex_2], vertex_1)
    else
        push!(adj[vertex_1], vertex_2)
        push!(adj[vertex_2], vertex_1)
    end
end


const ICMGate = Tuple{String,Vector{String}}

"""
Perfoms gates decomposition to provide a circuit in the icm format.
Reference: https://arxiv.org/abs/1509.02004
"""
function get_icm(
    circuit::Vector{ICMGate},
    n_qubits::Int,
    gates_to_decompose::Vector{String},
    with_measurements::Bool=false
)
    qubit_dict = Dict()  # mapping from qubit to it's compiled version
    compiled_circuit::Vector{ICMGate} = []
    curr_qubits = n_qubits
    for gate in circuit
        compiled_qubits = [get(qubit_dict, qubit, qubit) for qubit in gate[2]]

        if gate[1] in gates_to_decompose
            for (original_qubit, compiled_qubit) in zip(gate[2], compiled_qubits)
                new_qubit_name = "$(curr_qubits)"
                curr_qubits += 1

                qubit_dict[original_qubit] = new_qubit_name
                push!(compiled_circuit, ("CNOT", [compiled_qubit, new_qubit_name]))
                if with_measurements
                    push!(compiled_circuit,
                        ("$(gate[1])_measurement", [compiled_qubit]))
                    push!(compiled_circuit,
                        ("Gate_Conditioned_on_$(compiled_qubit)_Measurement",
                            [new_qubit_name]))
                end
            end
        else
            push!(compiled_circuit, (gate[1], compiled_qubits))
        end
    end

    return compiled_circuit, curr_qubits
end


"""Converts a given circuit in Clifford + T form to icm form and simulates the icm 
circuit using the graph sim mini simulator. Returns the adjacency list of the graph
state created by the icm circuit along with the single qubit operations on each vertex.

Args:
    circuit (Circuit): circuit to be simulated

Returns:    
    adj (List[Set[int]]): adjacency list describing the graph state
    lco (List[int]): local clifford operations on each node
"""
function _run_graph_sim_mini(circuit)
    n_qubits = Jabalizer.pyconvert(Int, circuit.n_qubits)
    print("ICM compilation: qubits=$n_qubits, gates=$(length(circuit.operations))\n\t")
    @time begin
    bare_circuit = Jabalizer.ICMGate[]
    for op in circuit.operations
        name = Jabalizer.pyconvert(String, op.gate.name)
        indices = [string(Jabalizer.pyconvert(Int, qubit)) for qubit in op.qubit_indices]
        push!(bare_circuit, (name, indices))
    end

    (icm_circuit, icm_n_qubits) = get_icm(bare_circuit, n_qubits, ["T", "T_Dagger", "RX", "RY", "RZ"])
    end
    
    print("Graph Sim Mini: qubits=$icm_n_qubits, gates=$(length(icm_circuit))\n\t")
    @time (loc, adj) = get_graph_state_data(icm_circuit, icm_n_qubits)

    # println("Graph Sim Mini finished")

    print("Convert adj:\n\t")
    @time py_adj = pylist([pylist(adj[i] .- 1) for i in 1:length(adj)]) # subtract 1 to convert to 0-indexing
    py_loc = pylist(loc)

    show(to)
    reset_timer!(to)

    return py_loc, py_adj
end

const ICMGate = Tuple{String,Vector{String}}

end
